apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'


kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('SharedCode')
            }
        }
    }

    js {
        browser {
        }
    }

    //target for both Android & Backend
    jvm()

    sourceSets {
        commonMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"

            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"

            implementation "com.soywiz.korlibs.klock:klock:$klockVersion"
            //implementation "com.soywiz.korlibs.klock:klock-metadata:$klockVersion"
        }

        jvmMain.dependencies{
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

            implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
            implementation "io.ktor:ktor-client-json-jvm:$ktor_version"

            //implementation "com.soywiz.korlibs.klock:klock-jvm:$klockVersion"
        }

        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"

                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"

                //implementation "com.soywiz.korlibs.klock:klock-iosx64:$klockVersion"
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')

                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"

                implementation "io.ktor:ktor-client-js:$ktor_version"
                implementation "io.ktor:ktor-client-core-js:$ktor_version"
                implementation "io.ktor:ktor-client-json-js:$ktor_version"

                implementation 'org.jetbrains.kotlinx:kotlinx-html-js:0.6.12'
            }
        }


    }
}


// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}



task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode

jvmJar {
    dependsOn(jsBrowserWebpack)
    from(new File(jsBrowserWebpack.entry.name, jsBrowserWebpack.outputPath))
}
